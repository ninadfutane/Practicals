import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt

dataset = pd.read_csv('temperatures.csv')

dataset.head()

nrows = dataset.shape[0]
ncols = dataset.shape[1]
print('The given dataset has {} rows and {} columns'.format(nrows,ncols))

dataset.isnull().any()

dataset.dtypes

dataset.describe()

x = np.array(dataset[['YEAR']])
# x set must be a 2D^^ array

x

# Here we choose January month to predict results using regression
y = np.array(dataset['JAN'])

y

# ## Spliting the dataset into training set and test set
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25)

ntest = len(x_test)
ntrain = len(x_train)
print('Length of training set is {} and of test set is {}'.format(ntrain,ntest))

# ## Create linear regression model
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()

# ### Train the model on training set

regressor.fit(x_train,y_train)
# ### Predict the test set results
y_pred = regressor.predict(x_test)

y_pred

print('Predicted  Vs  Actual value')
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))


from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
MAE = mean_absolute_error(y_test,y_pred)
MSE = mean_squared_error(y_test,y_pred)
r2score = r2_score(y_test,y_pred)
print('The MAE of the Linear Regression model is {}'.format(MAE))
print('The MSE of the Linear Regression model is {}'.format(MSE))
print('The R2 score of the Linear Regression model is {}'.format(r2score))


# ## Plotting the regression line
m = regressor.coef_
m

c = regressor.intercept_
c

eqn = 'y = {} x + {}'.format(float(m),float(c))
print('The equation of line is {}'.format(eqn))

plt.plot(x_test, regressor.predict(x_test), color='blue', linewidth=3)
plt.scatter(x_test, y_test, color='red')
plt.title("Temperature vs Year")
plt.xlabel("Year")
plt.ylabel("Temperature")
plt.show()

#To find top 10 temperature 
#As per 'Annual col' find 'top 10' temp data
top_10_data = trainData.nlargest(10, "ANNUAL")
 #Mentioned figure size 
plt.figure(figsize=(14,12))
plt.title("Top 10 temperature records")
#In barplot x & y axis year & temp resp
sns.barplot(x=top_10_data.YEAR, y=top_10_data.ANNUAL)
#It is found that highest record of temperature is in 2016 roughly 
#about 32 degree Celsius
----------------------------------------------------------------------------------------
#Analyse 2016 data
data_2016 = trainData[trainData["YEAR"]==2016]
 #x axis temp data in array format
xticks = np.array(data_2016[["JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"]].values)
 #y axis months labels
yticks = ["JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"]

#To plot the graph
#Mentioned figsize
plt.figure(figsize=(10,8))
#barh: xticks & yticks get and set the current tick locations and labels of the x & y-axis.
plt.barh(yticks,xticks[0])
plt.title("Month wise temperature data of 2016")
plt.xlabel("Temperature in degree celsius")
plt.ylabel("Month")
plt.show()
#From the above graph it is clear that May month recorded highest temperature around 35 degree celsius
